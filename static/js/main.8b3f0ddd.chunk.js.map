{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","indigo","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWirteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","match","useEffect","parse","search","ignoreQueryPrefix","showWriteButton","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancle","onPublish","isEdit","goBack","inEdit","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancleText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","postId","params","a","delete","ownPost","PostPage","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b3f0ddd.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n  padding-left: 1rem;\r\n  padding-right: 1rem;\r\n  width: 1024px;\r\n  margin: 0 auto; /* 중앙 정렬 */\r\n\r\n  /* 브라우저 크기에 따라 가로 크기 변경 */\r\n  @media (max-width: 1024px) {\r\n    width: 768px;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n  // style, className, onClick, onMouseMove 등의 porps를 사용할 수 있도록\r\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","const palette = {\r\n  gray: [\r\n    '#f8f9fa',\r\n    '#f1f3f5',\r\n    '#e9ecef',\r\n    '#dee2e6',\r\n    '#ced4da',\r\n    '#adb5bd',\r\n    '#868e96',\r\n    '#495057',\r\n    '#343a40',\r\n    '#212529',\r\n  ],\r\n  cyan: [\r\n    '#e3fafc',\r\n    '#c5f6fa',\r\n    '#99e9f2',\r\n    '#66d9e8',\r\n    '#3bc9db',\r\n    '#22b8cf',\r\n    '#15aabf',\r\n    '#1098ad',\r\n    '#0c8599',\r\n    '#0b7285',\r\n  ],\r\n  indigo: [\r\n    '#edf2ff',\r\n    '#dbe4ff',\r\n    '#bac8ff',\r\n    '#91a7ff',\r\n    '#748ffc',\r\n    '#5c7cfa',\r\n    '#4c6ef5',\r\n    '#4263eb',\r\n    '#3b5bdb',\r\n    '#364fc7',\r\n  ],\r\n};\r\n\r\nexport default palette;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst buttonStyle = css`\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding: 0.25rem 1rem;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n\r\n  background: ${palette.gray[8]};\r\n  &:hover {\r\n    background: ${palette.gray[6]};\r\n  }\r\n  ${(props) =>\r\n    props.fullWidth &&\r\n    css`\r\n      padding-top: 0.75rem;\r\n      padding-bottom: 0.75rem;\r\n      width: 100%;\r\n      font-size: 1.125rem;\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.indigo &&\r\n    css`\r\nbackground: ${palette.indigo[4]}};\r\n&:hover{\r\n    background: ${palette.indigo[3]};\r\n}\r\n`}\r\n\r\n&:disabled {\r\n    background: ${palette.gray[3]};\r\n    color: ${palette.gray[5]};\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\nconst StyledButton = styled.button`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  ${buttonStyle}\r\n`;\r\n\r\nconst Button = (props) => {\r\n  return props.to ? (\r\n    <StyledLink {...props} indigo={props.indigo ? 1 : 0} />\r\n  ) : (\r\n    <StyledButton {...props} />\r\n  );\r\n};\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  background: white;\r\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n/**\r\n *  Responsive 컴포넌트의 속서에 스타일을 추가해서 새로운 컴포넌트 생성\r\n */\r\nconst Wrapper = styled(Responsive)`\r\n  height: 4rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between; /* 자식 엘리먼트 사이의 여백을 최대로 설정 */\r\n  .logo {\r\n    font-size: 1.125rem;\r\n    font-weight: 800;\r\n    letter-spacing: center;\r\n  }\r\n  .right {\r\n    display: fixed;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\n/**\r\n * 헤더가 fixed로 되어있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해주는 컴포넌트\r\n */\r\nconst Spacer = styled.div`\r\n  height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n  font-weight: 800;\r\n  margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n  return (\r\n    <>\r\n      <HeaderBlock>\r\n        <Wrapper>\r\n          <Link to=\"/\" className=\"logo\">\r\n            REACTERS\r\n          </Link>\r\n          {user ? (\r\n            <div className=\"right\">\r\n              <UserInfo>{user.username}</UserInfo>\r\n              <Button onClick={onLogout}>로그아웃</Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"right\">\r\n              <Button to=\"/login\">로그인</Button>\r\n            </div>\r\n          )}\r\n        </Wrapper>\r\n      </HeaderBlock>\r\n      <Spacer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n글로벌 설정 예시:\r\n\r\n // API 주소를 다른 곳으로 사용함\r\n client.defaults.baseURL = 'https://external-api-server.com/'\r\n\r\n // 헤더 설정\r\n client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n // 인터셉터 설정\r\n axios.intercepter.response.use(\\\r\n    response => {\r\n    // 요청 성공시 특정 작업 수행\r\n    return response;\r\n    },\r\n    error => {\r\n    // 요청 실패시 특정 작업 수행\r\n    return Promise.reject(error);\r\n    }\r\n})\r\n*/\r\n\r\nexport default client;\r\n","import client from './client';\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n  client.post('/api/auth/login', { username, password });\r\n\r\n// 회원가입\r\nexport const register = ({ username, password }) =>\r\n  client.post('/api/auth/register', { username, password });\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n 요청을 위한 액션 타입을 payload로 설정합니다. (예:\"sample/GET_POST\")\r\n*/\r\n\r\nexport const startLoading = createAction(\r\n  START_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nexport const finishLoading = createAction(\r\n  FINISH_LOADING,\r\n  (requestType) => requestType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions(\r\n  {\r\n    [START_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: true,\r\n    }),\r\n    [FINISH_LOADING]: (state, action) => ({\r\n      ...state,\r\n      [action.payload]: false,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default loading;\r\n","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type)); // 로딩 시작\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type)); // 로딩 끝\r\n  };\r\n}\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] =\r\n  createRequestActionTypes('user/CHECK');\r\n\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, (user) => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n  try {\r\n    localStorage.removeItem('user'); // localSotrage에서 user를 제거\r\n  } catch (e) {\r\n    console.log('localStorage is not working');\r\n  }\r\n}\r\nfunction* logoutSaga() {\r\n  try {\r\n    yield call(authAPI.logout); // logout API호출\r\n    localStorage.removeItem('user'); // localStorage 에서 userf를 제거\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(CHECK, checkSaga);\r\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n  yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n  user: null,\r\n  checkError: null,\r\n};\r\n\r\nexport default handleActions(\r\n  {\r\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n    }),\r\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n      ...state,\r\n      user,\r\n      checkError: null,\r\n    }),\r\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      user: null,\r\n      checkError: error,\r\n    }),\r\n    [LOGOUT]: (state) => ({\r\n      ...state,\r\n      user: null,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n  return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n  ${(props) =>\r\n    props.hasMarginTop &&\r\n    css`\r\n      margin-top: 1rem;\r\n    `}\r\n  color: ${palette.gray[6]};\r\n\r\n   /* span 사이에 가웃뎃점 문자 보여주기 */\r\n\r\nspan + span:before {\r\n    color: ${palette.gray[4]};\r\n    padding-left: 0.25rem;\r\n    padding-right: 0.25rem;\r\n    content: '\\\\B7': /* 가운뎃점 문자 */\r\n    }\r\n`;\r\n\r\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\r\n  return (\r\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n      <span>\r\n        <b>\r\n          <Link to={`/@${username}`}>{username}</Link>\r\n        </b>\r\n      </span>\r\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n    </SubInfoBlock>\r\n  );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TagsBlock = styled.div`\r\n  margin-top: 0.5rem;\r\n  .tag {\r\n    display: inline-block;\r\n    color: ${palette.indigo[6]};\r\n    text-decoration: none;\r\n    margin-right: 0.5rem;\r\n    &:hover {\r\n      color: ${palette.indigo[5]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n  return (\r\n    <TagsBlock>\r\n      {tags.map((tag) => (\r\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n          #{tag}\r\n        </Link>\r\n      ))}\r\n    </TagsBlock>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 3rem;\r\n  padding-bottom: 3rem;\r\n  /* 맨위의 포스트는 padding-top 없음*/\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n  const { publishedDate, user, tags, title, body, _id } = post;\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n      <SubInfo\r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)}\r\n      />\r\n      <Tags tags={tags} />\r\n      <p>{body}</p>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nconst PostList = ({ posts, loading, error, showWirteButton }) => {\r\n  // 에러 발생시\r\n  if (error) {\r\n    return <PostListBlock>에러가 발생했습니다</PostListBlock>;\r\n  }\r\n\r\n  return (\r\n    <PostListBlock>\r\n      <WritePostButtonWrapper>\r\n        {showWirteButton && (\r\n          <Button indigo to=\"/write\">\r\n            새 글 작성하기\r\n          </Button>\r\n        )}\r\n      </WritePostButtonWrapper>\r\n      {/* 로딩 중이 아니고, 포스트 배열이 존재할 때만 보여 줌 */}\r\n      {!loading && posts && (\r\n        <div>\r\n          {posts.map((post) => (\r\n            <PostItem post={post} key={post._id} />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </PostListBlock>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\r\n  createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열으 ㄹ 숫자로 변환\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;\r\n","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/posts?${queryString}`);\r\n};\r\n\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, {\r\n    title,\r\n    body,\r\n    tags,\r\n  });\r\n\r\nexport const removePost = (id) => client.delete(`/api/posts/${id}`);\r\n","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user } = useSelector(\r\n    ({ posts, loading, user }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['posts/LIST_POSTS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    const { tag, username, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listPosts({ tag, username, page }));\r\n  }, [dispatch, location.search]);\r\n\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({ username, tag, page }) => {\r\n  const query = qs.stringify({ tag, page });\r\n  return username ? `/@${username}?${query}` : `/?${query}`;\r\n};\r\n\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n  return (\r\n    <PaginationBlock>\r\n      <Button\r\n        disabled={page === 1}\r\n        to={\r\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\r\n        }\r\n      >\r\n        이전\r\n      </Button>\r\n      <PageNumber>{page}</PageNumber>\r\n      <Button\r\n        disabled={page === lastPage}\r\n        to={\r\n          page === lastPage\r\n            ? undefined\r\n            : buildLink({ username, tag, page: page + 1 })\r\n        }\r\n      >\r\n        다음\r\n      </Button>\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n    lastPage: posts.lastPage,\r\n    posts: posts.posts,\r\n    loading: loading['posts/LIST_POSTS'],\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!posts || loading) return null;\r\n\r\n  //const { username } = match.params;\r\n\r\n  // page가 없으면 1을 기본값으로 사용\r\n  const {\r\n    tag,\r\n    username,\r\n    page = 1,\r\n  } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n\r\n  return (\r\n    <Pagination\r\n      tag={tag}\r\n      username={username}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 회원가입/로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\n/* 화면 전체를 채움 */\r\nconst AuthTemplateBlock = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: ${palette.gray[2]};\r\n  /* flex로 내부 내용 중앙 정렬 */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/* 흰색 박스 */\r\nconst WhiteBox = styled.div`\r\n  .logo-area {\r\n    display: black;\r\n    padding-botton: 2rem;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    letter-spacing: 2px;\r\n  }\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n  padding: 2rem;\r\n  width: 360px;\r\n  background: white;\r\n  border-radius: 2px;\r\n`;\r\nconst AuthTemplate = ({ children }) => {\r\n  return (\r\n    <AuthTemplateBlock>\r\n      <WhiteBox>\r\n        <div className=\"logo-area\">\r\n          <Link to=\"/\">REACTERS</Link>\r\n        </div>\r\n        {children}\r\n      </WhiteBox>\r\n    </AuthTemplateBlock>\r\n  );\r\n};\r\n\r\nexport default AuthTemplate;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\r\n  createRequestActionTypes('auth/REGISTER');\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\r\n  createRequestActionTypes('auth/LOGIN');\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register,login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form); // register/login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// 사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다.\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n/**\r\n * 회원가입 또는 로그인 폼을 보여 줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n  h3 {\r\n    margin: 0;\r\n    color: ${palette.gray[8]};\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n  font-size: 1rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[5]};\r\n  padding-bottom: 0.5rem;\r\n  outline: none;\r\n  width: 100%;\r\n  &:focus {\r\n    color: $oc-teal-7;\r\n    border-bottom: 1px solid ${palette.gray[7]};\r\n  }\r\n  & + & {\r\n    margin-top: 1rem;\r\n  }\r\n`;\r\n\r\n/**\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\r\n */\r\nconst Footer = styled.div`\r\n  margin-top: 2rem;\r\n  text-align: right;\r\n  a {\r\n    color: ${palette.gray[6]};\r\n    text-decoration: underline;\r\n    &:hover {\r\n      color: ${palette.gray[9]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ButtonWithMarginTop = styled(Button)`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n  login: '로그인',\r\n  register: '회원가입',\r\n};\r\n\r\n/**\r\n * 에러를 보여 줍니다.\r\n */\r\nconst ErrorMessage = styled.div`\r\n  color: red;\r\n  text-align: center;\r\n  font-size: 0.875rem;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n  const text = textMap[type];\r\n  return (\r\n    <AuthFormBlock>\r\n      <h3>{text}</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <StyledInput\r\n          autoComplete=\"username\"\r\n          name=\"username\"\r\n          placeholder=\"아이디\"\r\n          onChange={onChange}\r\n          value={form.username}\r\n        />\r\n        <StyledInput\r\n          autoComplete=\"new-password\"\r\n          name=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n          value={form.password}\r\n        />\r\n        {type === 'register' && (\r\n          <StyledInput\r\n            autoComplete=\"new-password\"\r\n            name=\"passwordConfirm\"\r\n            placeholder=\"비밀번호 확인\"\r\n            type=\"password\"\r\n            onChange={onChange}\r\n            value={form.passwordConfirm}\r\n          />\r\n        )}\r\n        {error && <ErrorMessage>{error}</ErrorMessage>}\r\n        <ButtonWithMarginTop indigo fullWidth style={{ marginTop: '1rem' }}>\r\n          {text}\r\n        </ButtonWithMarginTop>\r\n      </form>\r\n      <Footer>\r\n        {type === 'login' ? (\r\n          <Link to=\"/register\">회원가입</Link>\r\n        ) : (\r\n          <Link to=\"/login\">로그인</Link>\r\n        )}\r\n      </Footer>\r\n    </AuthFormBlock>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\n\r\nconst LoginForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.login,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'login',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password } = form;\r\n    dispatch(login({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링될때 form을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('login'));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (authError) {\r\n      console.log('오류 발생');\r\n      console.log(authError);\r\n      setError('로그인 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('로그인 성공');\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/');\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n  return (\r\n    <AuthForm\r\n      type=\"login\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <LoginForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n  const [error, setError] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    // 하나라도 비어있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링될때 form을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공/실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      // 계정이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다');\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  // user값이 잘 설정되었는지 확인\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push('/'); // 홈 화면으로 이동\r\n      try {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n      } catch (e) {\r\n        console.log('localStorage is not working');\r\n      }\r\n    }\r\n  }, [history, user]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm';\r\n\r\nconst RegisterPage = () => {\r\n  return (\r\n    <AuthTemplate>\r\n      <RegisterForm />\r\n    </AuthTemplate>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n  /* 페이지 위아래 여백 지정 */\r\n  padding-top: 5rem;\r\n  padding-bottom: 5rem;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  font-size: 3rem;\r\n  outline: none;\r\n  padding-bottom: 0.5rem;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst QuillWrapper = styled.div`\r\n  /* 최소 크기 지정 및 padding 제거 */\r\n  .ql-editor {\r\n    padding: 0;\r\n    min-height: 320px;\r\n    font-size: 1.125rem;\r\n    line-heignt: 1.5;\r\n  }\r\n\r\n  .ql-editor.ql-blank::before {\r\n    left: 0px;\r\n  }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\r\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\r\n\r\n  useEffect(() => {\r\n    quillInstance.current = new Quill(quillElement.current, {\r\n      theme: 'bubble',\r\n      placeholder: '내용을 작성하세요',\r\n      modules: {\r\n        // 더많은 옵션\r\n        // https://quilljs.com/docs/modules/toolbar/ 참고\r\n        toolbar: [\r\n          [{ header: '1' }, { header: '2' }],\r\n          ['bold', 'italic', 'underline', 'strike'],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n          ['blockquote', 'code-block', 'link', 'image'],\r\n        ],\r\n      },\r\n    });\r\n\r\n    // quill에 text-change 이벤트 핸들러 등록\r\n    const quill = quillInstance.current;\r\n    quill.on('text-change', (delta, oldDelta, source) => {\r\n      if (source === 'user') {\r\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n      }\r\n    });\r\n  }, [onChangeField]);\r\n\r\n  const mounted = useRef(false);\r\n  useEffect(() => {\r\n    if (mounted.current) return;\r\n    mounted.current = true;\r\n    quillInstance.current.root.innerHTML = body;\r\n  }, [body]);\r\n\r\n  const onChangeTitle = (e) => {\r\n    onChangeField({ key: 'title', value: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <EditorBlock>\r\n      <TitleInput\r\n        placeholder=\"제목을 입력하세요\"\r\n        onChange={onChangeTitle}\r\n        value={title}\r\n      />\r\n      <QuillWrapper>\r\n        <div ref={quillElement} />\r\n      </QuillWrapper>\r\n    </EditorBlock>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] =\r\n  createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] =\r\n  createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\n\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\n\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, (post) => post);\r\n\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: (state) => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: (state) => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n","import React, { useEffect, useCallback } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeField, initialize } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { title, body } = useSelector(({ write }) => ({\r\n    title: write.title,\r\n    body: write.body,\r\n  }));\r\n\r\n  const onChangeField = useCallback(\r\n    (payload) => dispatch(changeField(payload)),\r\n    [dispatch],\r\n  );\r\n\r\n  // 언마운트될 때 초기화\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되로록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map((tag) => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    (tag) => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (tag) => {\r\n      const nextTags = localTags.filter((t) => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞뒤 공백을 없앤 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력해주세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const tags = useSelector((state) => state.write.tags);\r\n\r\n  const onChangeTags = (nextTags) => {\r\n    dispatch(\r\n      changeField({\r\n        key: 'tags',\r\n        value: nextTags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n};\r\n\r\nexport default TagBoxContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 3rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정한 후 서로 간의 여백 지정 */\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\nconst WriteActionButtons = ({ onCancle, onPublish, isEdit }) => {\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton indigo onClick={onPublish}>\r\n        포스트 {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton onClick={onCancle}>취소</StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    }),\r\n  );\r\n\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancle = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패 시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons\r\n      onPublish={onPublish}\r\n      onCancle={onCancle}\r\n      inEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n","import React from 'react';\r\nimport Responsive from '../components/common/Responsive';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../containers/write/WriteActionButtonsContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst WritePage = () => {\r\n  return (\r\n    <Responsive>\r\n      <Helmet>\r\n        <title>글 작성하기 - REACTERS</title>\r\n      </Helmet>\r\n      <EditorContainer />\r\n      <TagBoxContainer />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default WritePage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] =\r\n  createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readPost = createAction(READ_POST, (id) => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\nexport function* postSaga() {\r\n  yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  post: null,\r\n  error: null,\r\n};\r\n\r\nconst post = handleActions(\r\n  {\r\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_POST]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default post;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n  margin-top: 4rem;\r\n`;\r\n\r\nconst PostHead = styled.div`\r\n  border-bottom: 1px solid ${palette.gray[2]};\r\n  padding-bottom: 3rem;\r\n  margin-bottom: 3rem;\r\n  h1 {\r\n    font-size: 3rem;\r\n    line-height: 1.5;\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n  font-size: 1.3125rem;\r\n  color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons }) => {\r\n  // 에러 발생 시\r\n  if (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\r\n    }\r\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\r\n  }\r\n\r\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\r\n  if (loading || !post) {\r\n    return null;\r\n  }\r\n\r\n  const { title, body, user, publishedDate, tags } = post;\r\n  return (\r\n    <PostViewerBlock>\r\n      <Helmet>\r\n        <title>{title} - REACTERS</title>\r\n      </Helmet>\r\n      <PostHead>\r\n        <h1>{title}</h1>\r\n        <SubInfo\r\n          username={user.username}\r\n          publishedDate={publishedDate}\r\n          hasMarginTop\r\n        />\r\n        <Tags tags={tags} />\r\n      </PostHead>\r\n      {actionButtons}\r\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\r\n    </PostViewerBlock>\r\n  );\r\n};\r\n\r\nexport default PostViewer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst AskModalBlock = styled.div`\r\n  width: 320px;\r\n  background: white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst AskModal = ({\r\n  visible,\r\n  title,\r\n  description,\r\n  confirmText = '확인',\r\n  cancleText = '취소',\r\n  onConfirm,\r\n  onCancle,\r\n}) => {\r\n  if (!visible) return null;\r\n  return (\r\n    <Fullscreen>\r\n      <AskModalBlock>\r\n        <h2>{title}</h2>\r\n        <p>{description}</p>\r\n        <div className=\"buttons\">\r\n          <StyledButton onClick={onCancle}>{cancleText}</StyledButton>\r\n          <StyledButton indigo onClick={onConfirm}>\r\n            {confirmText}\r\n          </StyledButton>\r\n        </div>\r\n      </AskModalBlock>\r\n    </Fullscreen>\r\n  );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onConfirm, onCancle }) => {\r\n  return (\r\n    <AskModal\r\n      visible={visible}\r\n      title=\"포스트 삭제\"\r\n      description=\"포스트를 정말 삭제하시겠습니까?\"\r\n      confirmText=\"삭제\"\r\n      onConfirm={onConfirm}\r\n      onCancle={onCancle}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AskRemoveModal;\r\n","import React, { useState, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  padding: 0.25rem 1.5rem;\r\n  border-radius: 4px;\r\n  color: ${palette.gray[6]};\r\n  font-weight: bold;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 0.875rem;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background: ${palette.gray[1]};\r\n    color: ${palette.indigo[5]};\r\n  }\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onRemoveClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancle = () => {\r\n    setModal(false);\r\n  };\r\n  const onConfirm = () => {\r\n    setModal(false);\r\n    onRemove();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PostActionButtonsBlock>\r\n        <ActionButton onClick={onEdit}>수정</ActionButton>\r\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n      </PostActionButtonsBlock>\r\n      <AskRemoveModal\r\n        visible={modal}\r\n        onConfirm={onConfirm}\r\n        onCancle={onCancle}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostActionButtons;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(\r\n    ({ post, loading, user }) => ({\r\n      post: post.post,\r\n      error: post.error,\r\n      loading: loading['post/READ_POST'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/'); // 홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={\r\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <PostViewerContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport PostPage from './pages/PostPage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path={['/login']} />\n      <Route component={RegisterPage} path={['/register']} />\n      <Route component={WritePage} path={['/write']} />\n      <Route component={PostPage} path={['/@:username/:postId']} />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth';\r\nimport loading from './loading';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post';\r\nimport posts, { postsSaga } from './posts';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n  loading,\r\n  user,\r\n  write,\r\n  post,\r\n  posts,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; //  로그인 상태가 아니라면 아무것도 안함\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localSotrage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}